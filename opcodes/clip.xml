<!--translated=yes
authors=Francois Pinot
english cvs version=1.15
// translated field can be yes, no or partially
// Add your name to the existing list of authors
// Add the version number of the file you are translating from the english version number on cvs
// *** Please remember to keep this information up to date! ***
-->

<refentry id="clip">
<indexterm id="IndexClip"><primary>clip</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Amplitude Modifiers</title></refentryinfo>
  <refmeta>
    <refentrytitle>clip</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>clip</refname>
    <refpurpose>
      Rogne un signal à une limite prédéfinie.
    </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      Coupe un signal de taux-a à une limite prédéfinie, de manière
      <quote>douce</quote>, en utilisant une méthode choisie parmi les trois
      possibles.
   </para>
  </refsect1>
 
  <refsect1>
    <title>Syntaxe</title>
    <synopsis>ares <command>clip</command> asig, imeth, ilimit [, iarg]</synopsis>
  </refsect1>
 
  <refsect1>
    <title>Initialisation</title>
    <para>
      <emphasis>imeth</emphasis> -- choisit la méthode de coupure. La valeur par
      défaut est 0. Les méthodes sont :
      <itemizedlist>
        <listitem>
            <para>0 = méthode de Bram de Jong (par défaut)</para>
        </listitem>

        <listitem>
            <para>1 = coupure par sinus</para>
        </listitem>

        <listitem>
            <para>2 = coupure par tanh</para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      <emphasis>ilimit</emphasis> -- valeur limite
    </para>

    <para>
      <emphasis>iarg</emphasis> (facultatif, 0.5 par défaut) -- lorsque
      <emphasis>imeth</emphasis> = 0, indique le point, compris entre 0 et 1, où
      la coupure commence. N'est pas utilisé si <emphasis>imeth</emphasis> = 1
      ou 2. Sa valeur par défaut est 0.5.
    </para>
  </refsect1>
 
  <refsect1>
    <title>Exécution</title>
    <para>
      <emphasis>asig</emphasis> -- signal de taux-a en entrée
    </para>

    <para>
      La méthode de Bram de Jong (<emphasis>imeth</emphasis> = 0) applique
      l'algorithme (en notant <emphasis>ilimit</emphasis> comme <emphasis>limit</emphasis>
      et <emphasis>iarg</emphasis> comme <emphasis>a</emphasis> :
    </para>

    <para>
      <informalexample>
        <programlisting>
|<emphasis>x</emphasis>| &gt;= 0 and |<emphasis>x</emphasis>| &lt;= (<emphasis>limit*a</emphasis>):  f(<emphasis>x</emphasis>) = f(<emphasis>x</emphasis>)
|<emphasis>x</emphasis>| &gt; (<emphasis>limit*a</emphasis>) and |<emphasis>x</emphasis>| &lt;= <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = sign(<emphasis>x</emphasis>) * (<emphasis>limit*a</emphasis>+(<emphasis>x-limit*a</emphasis>)/(1+((<emphasis>x-limit*a</emphasis>)/(<emphasis>limit</emphasis>*(1-<emphasis>a</emphasis>)))<superscript>2</superscript>))
|<emphasis>x</emphasis>| &gt; <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = sign(<emphasis>x</emphasis>) * (<emphasis>limit</emphasis>*(<emphasis>1+a</emphasis>))/2</programlisting>
      </informalexample>
    </para>

    <!--<para>
      Cette méthode nécessite que <emphasis>asig</emphasis> soit normalisé à 1.
    </para>-->

    <para>
      La seconde méthode (<emphasis>imeth</emphasis> = 1) est la coupure par sinus :
    </para>

    <para>
      <informalexample>
        <programlisting>
|<emphasis>x</emphasis>| &lt; <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = <emphasis>limit</emphasis> * sin(&pi;*<emphasis>x</emphasis>/(2*<emphasis>limit</emphasis>)),   |<emphasis>x</emphasis>| &gt;= <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = <emphasis>limit</emphasis> * sign(<emphasis>x</emphasis>)</programlisting>
      </informalexample>
    </para>

    <para>
      La troisème méthode (<emphasis>imeth = 2</emphasis>) est la coupure par tanh :
    </para>

    <para>
      <informalexample>
        <programlisting>
|<emphasis>x</emphasis>| &lt; <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = <emphasis>limit</emphasis> * tanh(<emphasis>x/limit</emphasis>)/tanh(1),   |<emphasis>x</emphasis>| &gt;= <emphasis>limit</emphasis>:  f(<emphasis>x</emphasis>) = <emphasis>limit</emphasis> * sign(<emphasis>x</emphasis>)</programlisting>
      </informalexample>
    </para>

    <note>
      <title>Note</title>
      <para>
        Il semble que la méthode 1 n'était pas fonctionnelle dans la
        version 4.07 de Csound.
      </para>
    </note>
  </refsect1>
 
  <refsect1>
    <title>Exemples</title>
    <para>
      Voici un exemple de l'opcode clip. Il utilise le fichier
      <ulink url="examples/clip.csd"><citetitle>clip.csd</citetitle></ulink>.

      <example>
        <title>Exemple de l'opcode clip.</title>
        <para>Voir les sections <link linkend="UsingRealTime"><citetitle>Audio en Temps Réel</citetitle></link>
        et <link linkend="CommandFlags"><citetitle>Options de la Ligne de Commande</citetitle></link> pour
        plus d'information sur l'utilisation des options de la ligne de commande.</para>
          <xi:include href="examples-xml/clip.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>
    </para>
  </refsect1>
 
  <refsect1>
    <title>Crédits</title>
    <para>
      <simplelist>
        <member>Auteur : &namejohn;</member>
        <member>Université de Bath, Codemist Ltd.</member>
        <member>Bath, UK</member>
        <member>Août, 2000</member>
      </simplelist>
    </para>

    <para>Nouveau dans la version 4.07 de Csound</para>
    <para>Septembre 2009 : grâce à une note de Paolo Dell'Osso, les formules ont été corrigées.</para>
  </refsect1>
</refentry>
