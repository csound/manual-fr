<!--translated=yes
authors=Francois Pinot
english cvs version=1.10
// translated field can be yes, no or partially
// Add your name to the existing list of authors
// Add the version number of the file you are translating from the english version number on cvs
// *** Please remember to keep this information up to date! ***
-->

<refentry id="OSClisten">
<indexterm id="IndexOSClisten"><primary>OSClisten</primary></indexterm>
  <refentryinfo><title>OSC</title></refentryinfo>
  <refmeta>
    <refentrytitle>OSClisten</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>OSClisten</refname>
    <refpurpose>
      Ecoute les messages OSC sur un chemin particulier, soit depuis un
      serveur OSC défini sur mesure, soit depuis le serveur UDP de Csound.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>Opcode du greffon osc ; opcode interne (pour le serveur UDP)</para>
    <para>
      Cherche à chaque cycle-k si un message OSC a été envoyé à un certain
      chemin d'un certain type.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntaxe</title>
    <synopsis>kans <command>OSClisten</command> ihandle, idest, itype [, xdata1, xdata2, ...]</synopsis>
    <synopsis>kans, kdata[] <command>OSClisten</command> ihandle, idest, itype</synopsis>
    <synopsis>kans, ... <command>OSClisten</command> idest, itype</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialisation</title>
    <para>
      <emphasis>ihandle</emphasis> -- Dans les deux premières versions (surcharges)
      de l'opcode, un identifiant retourné par un appel antérieur à OSCinit,
      pour associer OSClisten avec un numéro de port particulier. La troisième
      surcharge ne prend pas d'identifiant car elle sera à l'écoute de messages
      envoyés au <link linkend="udpserver"><citetitle>serveur UDP</citetitle></link>
      de Csound
    </para>
    <para>
      <emphasis>idest</emphasis> -- une chaîne de caractères représentant
      l'adresse de destination. Elle est formatée comme un chemin préfixé par
      une barre oblique, avec d'éventuels sous-répertoires séparés par des
      barres obliques. Csound traite les messages entrants qui correspondent à
      cette adresse.
    </para>

    <para>
      <emphasis>itype</emphasis> -- une chaîne de caractères indiquant le type
      des arguments optionnels à lire. La chaîne peut contenir les caractères
      "acdfhisAG" qui signifient audio, caractère, double, flottant, entier sur
      64 bit, entier sur 32 bit, chaîne de caractères, tableau scalaire et
      ftable. Tous les types sauf 'asA' nécessitent une variable de taux-k ;
      's' nécessite une variable chaîne de caractères, 'a' une variable audio et
      'A' un tableau de taux-i ou de taux-k. Pour le type 'G' on peut utiliser
      une variable ou une constante.
    </para>

    <para>
      Un identifiant est inséré dans le module d'écoute (voir
      <link linkend="OSCinit"><citetitle>OSCinit</citetitle></link>) pour
      intercepter les messages conformes à ce modèle.
    </para>

  </refsect1>

  <refsect1>
    <title>Exécution</title>
    <para>
      <emphasis>kans</emphasis> -- fixé à 1 si un nouveau message a été reçu,
      ou 0 dans le cas contraire. Si plusieurs messages sont reçus dans une
      seule période de contrôle, les messages sont mis dans un tampon, et
      <emphasis>OSClisten</emphasis> peut être rappelé jusqu'à ce que 0 soit
      retourné.
    </para>

    <para>
      S'il y avait un message les variables <emphasis>xdata</emphasis>
      recoivent les valeurs en entrée, selon l'interpétration du
      paramètre <emphasis>itype</emphasis>. Noter que bien que les variables
      <emphasis>xdata</emphasis> soient situées à droite de l'opérateur, ce
      sont des sorties, et elles doivent donc être des variables de type a, ga,
      k, gk, S, gS, k[] ou gk[]
      et peut-être nécessiter une déclaration avec <emphasis>init</emphasis>
      ou = dans le cas des variables chaîne de caractères, avant l'appel à
      <emphasis>OSClisten</emphasis>.
    </para>

    <para>
      Alternativement, si le message à recevoir est une série de valeurs toutes
      du même type numérique scalaire (par exemple un de "dfhi"), alors le
      paramètre retourné <emphasis>kdata</emphasis> peut être utilisé à la place
      de variables <emphasis>xdata</emphasis>. <emphasis>kdata</emphasis> doit
      être un tableau qui doit être déclaré avec init avant l'appel à OSClisten,
      ou être utilisé avec la syntaxe []. Il sera créé avec une taille
      suffisante s'il diffère d'un tableau unidimensionel dont la taille est
      supérieure ou égale à la longueur donnée par la chaîne de formatage. Si
      un message est reçu, ce tableau sera rempli avec les valeurs entrantes.
      Voir ci-dessous pour un exemple de cette utilisation.
    </para>

    <para>
      La troisième surcharge utilise un nombre différent de sorties de
      différents types (k ou S) pour les messages correspondant à l'adresse et
      au type qui entrent dans le serveur UDP. Il n'accepte que des valeurs
      scalaires ("dfhi") ou chaînes de caractères ("s").
    </para>
  </refsect1>

  <refsect1>
    <title>Exemples</title>
    <para>
      L'exemple montre une paire de nombres en virgule flottante reçus sur
      le port 7770.
    </para>

      <informalexample>
        <programlisting>
  <emphasis role="ohdr">sr</emphasis> <emphasis role="op">=</emphasis> 44100
  <emphasis role="ohdr">ksmps</emphasis> <emphasis role="op">=</emphasis> 100
  <emphasis role="ohdr">nchnls</emphasis> <emphasis role="op">=</emphasis> 2

  gihandle <emphasis role="opc">OSCinit</emphasis> 7770

  <emphasis role="oblock">instr</emphasis>   1
    kf1 <emphasis role="opc">init</emphasis> 0
    kf2 <emphasis role="opc">init</emphasis> 0
nxtmsg:
    kk  <emphasis role="opc">OSClisten</emphasis> gihandle, &quot;/foo/bar&quot;, &quot;ff&quot;, kf1, kf2
if (kk <emphasis role="op">==</emphasis> 0) goto ex
    <emphasis role="opc">printk</emphasis> 0,kf1
    <emphasis role="opc">printk</emphasis> 0,kf2
    <emphasis role="opc">kgoto</emphasis> nxtmsg
ex:
  <emphasis role="oblock">endin</emphasis>
        </programlisting>
      </informalexample>

    <para>
      Ci-dessous deux fichiers .csd démontrent l'utilisation des opcodes OSC.
      Ils utilisent les fichiers
      <ulink url="examples/OSCmidisend.csd"><citetitle>OSCmidisend.csd</citetitle></ulink>
      et <ulink url="examples/OSCmidircv.csd"><citetitle>OSCmidircv.csd</citetitle></ulink>.

      <example>
        <title>Exemples des opcodes OSC.</title>
        <para>
          Les deux fichiers .csd suivants démontrent l'utilisation des opcodes
          OSC dans Csound. Le premier fichier,
          <ulink url="examples/OSCmidisend.csd"><citetitle>OSCmidisend.csd</citetitle></ulink>,
          transforme des messages MIDI reçus en  en données OSC. Le
          second fichier,
          <ulink url="examples/OSCmidircv.csd"><citetitle>OSCmidircv.csd</citetitle></ulink>,
          peut prendre ces messages OSC et les interpréter pour générer du son
          à partir des messages de note, et stocker les valeurs de contrôleur. Il
          utilise le contrôleur 7 pour modifier le volume. Noter que ces fichiers
          sont conçus pour se trouver sur la même machine, mais si une adresse
          d'hôte différente (dans la macro IPADDRESS) est utilisée, ils peuvent
          se trouver sur différentes machines d'un réseau, ou connectées via
          l'internet.
        </para>
        <para>Fichier CSD pour envoyer des messages OSC :</para>
          <xi:include href="examples-xml/OSCmidisend.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <para>Fichier CSD pour recevoir des messages OSC :</para>
          <xi:include href="examples-xml/OSCmidircv.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>
    </para>
    <para>
      L'exemple suivent montre l'usage de la troisième surcharge de l'opcode
      OSClisten. Il utilise le fichier
      <ulink url="examples/OSClistenex2.csd"><citetitle>OSClistenex2.csd</citetitle></ulink>.
    </para>
    <xi:include href="examples-xml/OSClistenex2.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </refsect1>

  <refsect1>
    <title>Voir aussi</title>
      <para>
        <link linkend="OSC"><citetitle>OSC (Open Sound Control)</citetitle></link>
      </para>
    <para>
      Plus d'information sur cet opcode :
      <ulink url="http://www.youtube.com/watch?v=JX1C3TqP_9Y"><citetitle>http://www.youtube.com/watch?v=JX1C3TqP_9Y</citetitle></ulink>,
      par Andrés Cabrera.
    </para>
  </refsect1>
  
  <refsect1>
    <title>Crédits</title>
    <para>
      <simplelist>
        <member>Auteur : &namejohn; Victor Lazzarini</member>
        <member>2005, 2024</member>
        <member>Exemples par David Akbari, &nameandres; et Jonathan Murphy 2007 ;
        Victor Lazzarini 2024</member>
      </simplelist>
    </para>
    <para>
      <simplelist>
        <member>Les types aAG sont nouveaux dans Csound 6.07</member>
        <member>L'utilisation d'un tableau en sortie est nouvelle dans
        Csound 6.12</member>
        <member>Le support du serveur UDP est nouveau dans Csound 7.0</member>
      </simplelist>
    </para>
  </refsect1>
</refentry>
