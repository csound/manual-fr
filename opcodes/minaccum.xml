<!--translated=yes
authors=Francois Pinot
english cvs version=1.7
// translated field can be yes, no or partially
// Add your name to the existing list of authors
// Add the version number of the file you are translating from the english version number on cvs
// *** Please remember to keep this information up to date! ***
-->

<refentry id="minaccum">
<indexterm id="IndexMinaccum"><primary>minaccum</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Comparators and Accumulators</title></refentryinfo>
  <refmeta>
    <refentrytitle>minaccum</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>minaccum</refname>
    <refpurpose>
      Accumule la valeur minimale de signaux audio.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      <emphasis>minaccum</emphasis> compare deux variables de taux-audio et écrit
      la valeur minimale des deux dans la première.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntaxe</title>
    <synopsis><command>minaccum</command> aAccumulator, aInput</synopsis>
  </refsect1>

  <refsect1>
    <title>Exécution</title>
    <para>
      <emphasis>aAccumulator</emphasis> -- variable audio dans laquelle la valeur
      minimale est écrite.
    </para>

    <para>
      <emphasis>aInput</emphasis> -- signal auquel <emphasis>aAccumulator</emphasis>
      est comparé.
    </para>

    <para>
      L'opcode <emphasis>minaccum</emphasis> est conçu pour accumuler la valeur
      minimale de plusieurs signaux audio qui peuvent provenir de plusieurs
      instances de note, dans différents canaux, ou qui ne peuvent être comparés
      en une fois au moyen de l'opcode <emphasis>min</emphasis>. Sa sémantique
      est semblable à celle de <emphasis>vincr</emphasis> car
      <emphasis>aAccumulator</emphasis> est utilisé à la fois comme variable
      d'entrée et comme variable de sortie, sauf que <emphasis>minaccum</emphasis>
      garde la valeur minimale au lieu d'additionner les signaux ensemble.
      <emphasis>minaccum</emphasis> exécute l'opération suivante sur chaque
      paire d'échantillons :
    </para>

    <para>
      <literallayout>
            if  (aInput &lt; aAccumulator)  aAccumulator = aInput</literallayout>
    </para>

    <para>
      <emphasis>aAccumulator</emphasis> sera habituellement une variable audio
      globale. A la fin de chaque cycle de calcul (période-k), après que sa valeur
      ait été lue et utilisée, la variable accumulateur doit habituellement être
      réinitialisée à une valeur positive suffisamment grande pour être toujours
      supérieure aux signaux d'entrée auquels elle est comparée.
    </para>
  </refsect1>

   <refsect1>
    <title>Exemples</title>
    <para>
      Voici un exemple de l'opcode minaccum. Il utilise le fichier
      <ulink url="examples/minaccum.csd"><citetitle>minaccum.csd</citetitle></ulink>.
      <example>
        <title>Exemple de l'opcode minaccum.</title>
        <para>Voir les sections <link linkend="UsingRealTime"><citetitle>Audio en Temps Réel</citetitle></link>
        et <link linkend="CommandFlags"><citetitle>Options de la Ligne de Commande</citetitle></link> pour plus
        d'information sur l'utilisation des options de la ligne de commande.</para>
          <xi:include href="examples-xml/minaccum.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>
    </para>
  </refsect1>

  <refsect1>
    <title>Voir aussi</title>
    <para>
      <link linkend="SigmodCompaccum"><citetitle>Comparateurs et accumulateurs</citetitle></link>
    </para>
  </refsect1>

  <refsect1>
    <title>Crédits</title>
    <para>
      <simplelist>
        <member>Auteur : &nameanthony;</member>
        <member>Mars 2006</member>
      </simplelist>
    </para>

    <para>Nouveau dans la version 5.01 de Csound.</para>
  </refsect1>
</refentry>
