<!--translated=yes
authors=Francois Pinot
english cvs version=1.7
// translated field can be yes, no or partially
// Add your name to the existing list of authors
// Add the version number of the file you are translating from the english version number on cvs
// *** Please remember to keep this information up to date! ***
-->

<section id="ScoreEval">
  <title>Evaluation des expressions</title>

  <para>
    Dans les anciennes versions de Csound les nombres présents dans une partition étaient utilisés
    tels quels. Dans certains cas, une évaluation simple serait plus facile. Ce besoin est accru s'il
    y a des macros. Pour y arriver, on a introduit la syntaxe des expressions arithmétiques entre
    crochets [ ]. On peut utiliser des expressions avec les opérations +, -, *, /, % ("modulo"), et
    ^ ("élévation à une puissance"), les groupements se faisant par parenthèses ( ). Les signes
    unaires plus et moins sont aussi supportés. Les expressions peuvent inclure des nombres et,
    naturellement, des macros dont la valeur est une chaîne numérique ou arithmétique. Tous les
    calculs sont faits en nombres en virgule flottante. Les règles de précédence usuelles sont
    suivies lors de l'évaluation : les expressions entre parenthèse () sont évaluées en premier
    et ^ est évalué avant *, /, et % qui sont évalués avant + et -.
  </para>

  <para>
    En plus des opérations arithmétiques, les opérateurs logiques bit à bit suivants sont aussi
    disponibles : &amp; (ET), | (OU), et # (OU exclusif). Ces opérateurs arrondissent leurs
    opérandes à l'entier (long) le plus proche avant l'évaluation. Les opérateurs logiques ont la
    même précédence que les opérateurs arithmétiques *, /, et %.
  </para>
  
  <para>
    Finalement, on peut utiliser le symbole tilde &tilde; dans une expression chaque fois qu'un
    nombre est permis. Chaque &tilde; sera remplacé par un nombre aléatoire compris entre zéro (0)
    et un (1).
  </para>
  
  <simplesect>
    <title>Exemple</title>
    <para>
      <informalexample>
        <programlisting>
<emphasis role="stamnt">r</emphasis>3  CNT

<emphasis role="stamnt">i</emphasis>1  0  [0.3*$CNT.]
<emphasis role="stamnt">i</emphasis>1  +  [($CNT./3)+0.2]

<emphasis role="stamnt">e</emphasis></programlisting>
      </informalexample>

      Comme les trois copies de la section comprennent la macro $CNT. avec les valeurs successives
      1, 2 et 3, le développement est

      <informalexample>
        <programlisting>
<emphasis role="stamnt">s</emphasis>
<emphasis role="stamnt">i</emphasis>1  0  0.3
<emphasis role="stamnt">i</emphasis>1  0.3  0.533333
<emphasis role="stamnt">s</emphasis>
<emphasis role="stamnt">i</emphasis>1  0  0.6
<emphasis role="stamnt">i</emphasis>1  0.6  0.866667
<emphasis role="stamnt">s</emphasis>
<emphasis role="stamnt">i</emphasis>1  0  0.9
<emphasis role="stamnt">i</emphasis>1  0.9  1.2
<emphasis role="stamnt">e</emphasis></programlisting>
      </informalexample>

      C'est une forme extrême, mais on peut aussi utiliser le système d'évaluation pour répéter des
      sections avec des différences subtiles.
    </para>

    <para>
      Voici quelques exemples simples de chaque opérateur :
      
      <informalexample>
        <programlisting>
<emphasis role="stamnt">i</emphasis>1  0   1   [ 110 + 220 ]      ; evaluates to 330
<emphasis role="stamnt">i</emphasis>1  +   .   [ 330 - 55 ]       ; 275
<emphasis role="stamnt">i</emphasis>1  +   .   [ 44 * 10 ]        ; 440
<emphasis role="stamnt">i</emphasis>1  +   .   [ 1100 / 2 ]       ; 550
<emphasis role="stamnt">i</emphasis>1  +   .   [ 5 ^ 4 ]          ; 625
<emphasis role="stamnt">i</emphasis>1  +   .   [ 5660 % 1000 ]    ; 660
<emphasis role="stamnt">i</emphasis>1  +   .   [ 110 &amp; 220 ]      ; 76
<emphasis role="stamnt">i</emphasis>1  +   .   [ 110 | 220 ]      ; 254
<emphasis role="stamnt">i</emphasis>1  +   .   [ 110 # 220 ]      ; 178
<emphasis role="stamnt">i</emphasis>1  +   .   [~]                ; random between 0-1
<emphasis role="stamnt">i</emphasis>1  +   .   [~ * 4 + 1]        ; random between 1-5
<emphasis role="stamnt">i</emphasis>1  +   .   [~ * 95 + 5]       ; random between 5-100

<emphasis role="stamnt">i</emphasis>1  +   .   [ 8 / 2 * 3 ]      ; 12
<emphasis role="stamnt">i</emphasis>1  +   .   [ 4 + 3 - 2 + 1 ]  ; 6
<emphasis role="stamnt">i</emphasis>1  +   .   [ 4 + 3 * 2 + 1 ]  ; 11
<emphasis role="stamnt">i</emphasis>1  +   .   [(4 + 3)*(2 + 1)]  ; 21

<emphasis role="stamnt">i</emphasis>1  +   .   [ 2 * 2 &amp; 3 ]      ; 4
<emphasis role="stamnt">i</emphasis>1  +   .   [ 3 &amp; 2 * 2 ]      ; 0
<emphasis role="stamnt">i</emphasis>1  +   .   [ 4 | 3 * 3 ]      ; 13</programlisting>
      </informalexample>
    </para>
  </simplesect>
  <simplesect>
  <title>L'opérateur &commat;</title>
  <para>
    On a ajouté dans la version 3.56 de Csound <emphasis>&commat;</emphasis><emphasis>x</emphasis>
    (la première puissance de deux supérieure ou égale à <emphasis>x</emphasis>) et
    <emphasis>&commat;&commat;</emphasis><emphasis>x</emphasis> (la première puissance de deux plus
    un supérieure ou égale à <emphasis>x</emphasis>).

    <indexterm id="IndexCommat"><primary>&commat;</primary></indexterm>
    <indexterm id="IndexCommatCommat"><primary>&commat;&commat;</primary></indexterm>
  </para>
      <informalexample>
        <programlisting>
[ @ 11 ] will evaluate to 16
[ @@ 11 ] to 17</programlisting>
      </informalexample>
  </simplesect>

  <simplesect>
    <title>Crédits</title>
    <para>Auteur : &namejohn;</para>
    <para>University of Bath/Codemist Ltd.</para>
    <para>Bath, UK</para>
    <para>Avril 1998 (Nouveau dans la version 3.48 de Csound)</para>
  </simplesect>
</section>
